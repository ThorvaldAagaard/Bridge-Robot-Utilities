// This script file is licensed under a Creative Commons
// Attribution 4.0 International License (cc by 4.0):
// http://creativecommons.org/licenses/by/4.0/
// You may adapt and/or share this script file for any purpose,
// provided you give credit to http://bridgecomposer.com
//
//  This script converts a TXT file produced by Blue Chip Bridge to PBN.
//
//  Revision 2020-09-04

<job>
<script language="JScript" src="BCConst.js" />
<script language="JScript" src="BCDeal.js" />
<script language="JScript">

function AddCards(iHand)
{
  var cHands = 0;
  for (var i = 0; i < strLine.length; ++i) {
    var ch = strLine.charAt(i);
    var ix = 'SHDC'.indexOf(ch);
    if (ix >= 0) {
      var iSuit = ix;
      if (cHands++ > 0)
        iHand = EAST;
      
      continue;
    }
    
    ix = '23456789TJQKA'.indexOf(ch);
    if (ix >= 0) {
      var h = deal.hand[iHand];
      var s = h.suit[iSuit];
      s.card.push(ch);
      ++s.length;
      var ncp = 'JQKA'.indexOf(ch) + 1;
      s.hcp += ncp;
      h.hcp += ncp;
    }
  }
}

function GetLine(optional)
{
  for (;;) {
    if (fin.AtEndOfStream) {
      if (optional)
        return 0;
      
      bc.alert('Unexpected end of input file', MB_ICONERROR);
      WScript.Quit(1);
    }
    
    strLine = fin.ReadLine();
    ++nLine;
    if (strLine.length > 0)
      return nLine;
  }
}

var arVul = ['None', 'NS', 'EW', 'All'];

var bc = WScript.CreateObject('BridgeComposer.Object');
if (WScript.Arguments.length > 0) {
  bc.Open(WScript.Arguments.Item(0));
}

var path = bc.BrowseForFile('Input Text File', 0, 'Text files (*.txt)|*.txt|All files (*.*)|*.*||');
if (!path)
  WScript.Quit();

var fso = WScript.CreateObject('Scripting.FileSystemObject');
if (!fso.FileExists(path)) {
  bc.alert('File not found: ' + path, MB_ICONERROR);
  WScript.Quit(1);
}

var fin = fso.OpenTextFile(path, 1);
var nLine = 0;
for (;;) {
  if (!GetLine(true))
    break;
  
  var brd = bc.NewBoard();
  var deal = new Deal('N');
  
  var strDealId = '';
  var strBoard = '1';
  var mat;
  if (mat = strLine.match(/Deal number : ([^\s]+)  \(Board (\d+)\)/)) {
    strDealId = mat[1];
    strBoard = mat[2];
  } else if (mat = strLine.match(/Board (\d+)/)) {
    strBoard = mat[1];
  } else if (mat = strLine.match(/Deal number : ([^\s]+)/)) {
    strDealId = mat[1];
  }
  
  brd.TagValue('DealId') = strDealId;
  brd.TagValue('Board') = strBoard;
  
  GetLine();    // North header
  if (mat = strLine.match(/North \((.*)\)/))
    brd.TagValue('North') = mat[1];
  
  for (var i = 0; i < NSUITS; ++i) {
    GetLine();
    AddCards(NORTH);
  }
  
  GetLine();    // West/East header
  if (mat = strLine.match(/West \((.*?)\)/))
    brd.TagValue('West') = mat[1];
  
  if (mat = strLine.match(/East \((.*)\)/))
    brd.TagValue('East') = mat[1];
  
  for (var i = 0; i < NSUITS; ++i) {
    GetLine();
    AddCards(WEST);
  }
  
  GetLine();    // South header
  if (mat = strLine.match(/South \((.*)\)/))
    brd.TagValue('South') = mat[1];
  
  for (var i = 0; i < NSUITS; ++i) {
    GetLine();
    AddCards(SOUTH);
  }

  GetLine();    // Dealer
  var chDealer = strLine.charAt(9);
  brd.TagValue('Dealer') = chDealer;
  brd.TagValue('Deal') = deal.format(chDealer);
    
  GetLine();    // vulnerability
  var nVul = 0;
  var ix = strLine.indexOf(':');
  if (strLine.substr(ix, 3) !== ': n')
    nVul += 1;
  
  ix = strLine.indexOf(':', ix + 1);
  if (strLine.substr(ix, 3) !== ': n')
    nVul += 2;
  
  brd.TagValue('Vulnerable') = arVul[nVul];
    
  GetLine();    // Auction header
  brd.TagValue('Auction') = chDealer;
  
  var bPassout = false;
  for (;;) {    // Auction section
    GetLine();
    if (strLine.substr(0, 11) === 'Contract : ')
      break;
    
    brd.TagSection('Auction') += strLine;
    if (brd.TagSection('Auction') === 'Pass Pass Pass Pass\r\n') {
      brd.TagValue('Contract') = 'Pass';
      bPassout = true;
      break;
    }
  }
  
  if (!bPassout) {
    // Contract
    var arc = strLine.split(' ');
    var strContract = arc[2];
    var chDeclarer = arc[arc.length - 1].substr(0, 1);
    if (strLine.match(/redoubled/))
      strContract += 'XX';
    else if (strLine.match(/doubled/))
      strContract += 'X';
    brd.TagValue('Contract') = strContract;
    brd.TagValue('Declarer') = chDeclarer;      
      
    GetLine();    // Play header
    var ix = 'NESW'.indexOf(chDeclarer);
    var nLeader = (ix + 1) & 3;
    brd.TagValue('Play') = 'NESW'.charAt(nLeader);

    // Play section
    for (;;) {
      GetLine();
      if (strLine.substr(0, 9) === 'Result : ')
        break;
      
      var arPlay = [];
      var iPlay = 0;
      var ss = 0;
      for (var ix = 0; ix < strLine.length; ++ix) {
        var ch = strLine.charAt(ix);
        switch (ss) {
        case 0:
          var iSuit = 'SHDC'.indexOf(ch);
          if (iSuit >= 0) {
            arPlay[iPlay] = ch;
            ++ss;
          }
          break;
          
        case 1:
          var iRank = '23456789TJQKA'.indexOf(ch);
          if (iRank >= 0) {
            arPlay[iPlay] += ch;
            ++iPlay;
            ss = 0;
          }
          break;
        }
      }
      
      var strPlay = '';
      for (var ix = 0; ix < NHANDS; ++ix) {
        if (ix > 0)
          strPlay += ' ';
        
        iPlay = (nLeader - WEST + ix) & 3;
        strPlay += arPlay[iPlay];
      }
      
      brd.TagSection('Play') += strPlay;
    }
    
    // Result
    var nResult = parseInt(strContract.charAt(0)) + 6;
    var mat;
    if (mat = strLine.match(/made$/)) {
    } else if (mat = strLine.match(/made for/)) {
    } else if (mat = strLine.match(/made with (\d+) overtrick/)) {
      nResult += parseInt(mat[1]);
    } else if (mat = strLine.match(/down by (\d+) trick/)) {
      nResult -= parseInt(mat[1]);
    }

    brd.TagValue('Result') = nResult;
    
    // Score
    if (mat = strLine.match(/ for ([+]\d+) points/)) {
      var nScore = mat[1];
      var strScore = (chDeclarer === 'N' || chDeclarer == 'S') ? 'NS' : 'EW';
      strScore += ' ' + nScore;
      brd.TagValue('Score') = strScore;
    }
  }
  
  // skip to end of board

  for (;;) {
    if (!GetLine(true))
      break;
    
    if (strLine.substr(0,10) === '----------')
      break;
  }
  
  if (fin.AtEndOfStream)
    break;
}

bc.DoubleDummyAllBoards();
bc.Save();

</script>
</job>
